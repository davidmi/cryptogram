// Copyright 2012. The Cryptogram Authors. BSD License.
// Author: tierney@cs.nyu.edu (Matt Tierney)

#include <cstring>
#include <iostream>
#include <vector>

#include "aesthete.h"
#include "array.h"
#include "ecc_image.h"
#include "google/gflags.h"
#include "jpeg_codec.h"
#include "reentrant_rand.h"
#include "reed_solomon/rs_codec.h"

DEFINE_int32(quality, 72, "JPEG quality to use.");

namespace cryptogram {

const int ByteSize = 8;

void FillWithRandomData(uint8_t *data, size_t len) {
  for (unsigned int i = 0; i < len; i++) {
    uint8_t tmp = rand() % 256;
    std::cout << tmp << " ";
    data[i] = tmp;
  }
  std::cout << std::endl;
}

// We will be given a sequence of 223 randomly-generated bytes. The bytes will
// then be ECC'd to produce a parity sequence of bytes. This produce is executed
// twice. These 510 bytes are concatenated. The result is then embedded into an
// array that is the JPEG'd. The JPEG is decompressed and decoded to two total
// transmissions, which each are 255 bytes (223 message byte and 32 parity
// bytes). We must compare the sequence of bytes.
class EccMessage {
 public:
  enum Position {
    FIRST = 0,
    SECOND,
  };

  EccMessage() {
    memset(bytes_, 0, sizeof(bytes_));
    memset(first_message_, 0, sizeof(first_message_));
    memset(first_parity_, 0, sizeof(first_parity_));
    memset(second_message_, 0, sizeof(second_message_));
    memset(second_parity_, 0, sizeof(second_parity_));
  }

  virtual ~EccMessage() {}

  void SetMessage(uint8_t *message, Position pos) {
    memcpy(bytes_ + (pos * kRs255_223TotalBytes),
           message,
           kRs255_223MessageBytes);
  }

  void SetParity(uint16_t *parity, Position pos) {
    std::cout << "SetParity: " << std::endl;
    for (unsigned int i = 0, pos_i = pos * kRs255_223TotalBytes;
         i < kParityArraySize;
         i++, pos_i += 1) {
      // Sanity check that the parity values, even though they are stored in
      // uint16_t have a size of one byte.
      assert(parity[i] % 256 == parity[i]);

      std::cout << kRs255_223MessageBytes + pos_i << " ";
      bytes_[kRs255_223MessageBytes + pos_i + 0] = parity[i] % kCharMax;
      bytes_[kRs255_223MessageBytes + pos_i + 1] = parity[i] / kCharMax;
    }
    std::cout << std::endl;
    std::cout << std::endl;
  }

  static void FillWithRandomData(uint8_t *data, size_t len) {
    // Assumes that the PRNG has already been seeded.
    for (unsigned int i = 0; i < len; i++) {
      data[i] = rand() % 256;
    }
  }

  char *flatten() {
    std::cout << "First Message: " << sizeof(first_message_) << std::endl;
    memcpy(bytes_,
           first_message_,
           sizeof(first_message_));
    SetParity(first_parity_, FIRST);

    std::cout << "Second Message: " << kRs255_223MessageBytes << std::endl;
    memcpy(bytes_ + kRs255_223TotalBytes,
           first_message_,
           sizeof(second_message_));
    SetParity(first_parity_, SECOND);

    return bytes_;
  }

  char *bytes() { return bytes_; }

  uint8_t *first_message() { return first_message_; }
  uint16_t *first_parity() { return first_parity_; }

  uint8_t *second_message() { return second_message_; }
  uint16_t *second_parity() { return second_parity_; }

 private:
  char bytes_[2 * kRs255_223TotalBytes];

  uint8_t first_message_[kRs255_223MessageBytes];
  uint16_t first_parity_[kParityArraySize];
  uint8_t second_message_[kRs255_223MessageBytes];
  uint16_t second_parity_[kParityArraySize];
};

void Foo() {
  std::vector<int> discretizations;
  discretizations.push_back(240);
  discretizations.push_back(208);
  discretizations.push_back(176);
  discretizations.push_back(144);
  discretizations.push_back(112);
  discretizations.push_back(80);
  discretizations.push_back(48);
  discretizations.push_back(16);

  array<unsigned char> image(kBlocksWide * kPixelDimPerBlock * kCharsPerPixel,
                             kBlocksHigh * kPixelDimPerBlock);

  srand(time(NULL));

  EccMessage ecc_msg;
  EccMessage::FillWithRandomData(ecc_msg.first_message(), kRs255_223MessageBytes);

  RsCodec rs_codec;
  rs_codec.Encode(ecc_msg.first_message(), ecc_msg.first_parity());

  std::cout << "Ecc Message Contents: " << std::endl;
  for (int i = 0; i < kRs255_223MessageBytes; i++) {
    std::cout << (int)ecc_msg.first_message()[i] << " ";
  }
  std::cout << std::endl;

  for (int i = 0; i < kParityArraySize; i++) {
    std::cout << ecc_msg.first_parity()[i] << " ";
  }
  std::cout << std::endl;
  std::cout << " / Ecc Message Contents: " << std::endl;

  std::cout << "Various parts: \n" << std::endl;
  char *output = ecc_msg.flatten();
  std::cout << "First Message: \n" << std::endl;
  for (int i = 0; i < kRs255_223MessageBytes; i++) {
    std::cout << (int)output[i] << " ";
  }
  std::cout << "\nFirst Parity: \n" << std::endl;
  for (int i = kRs255_223MessageBytes; i < kRs255_223MessageBytes + kRs255_223ParityBytes; i++) {
    std::cout << (int)output[i] << " ";
  }
  std::cout << std::endl;

  std::cout << "Second Message: \n" << std::endl;
  for (int i = kRs255_223TotalBytes; i < kRs255_223TotalBytes + kRs255_223MessageBytes; i++) {
    std::cout << (int)output[i] << " ";
  }
  std::cout << "\nSecond Parity: \n" << std::endl;
  for (int i = kRs255_223TotalBytes + kRs255_223MessageBytes; i < 2 * kRs255_223TotalBytes; i++) {
    std::cout << (int)output[i] << " ";
  }
  std::cout << std::endl;

  // memcpy(ecc_bytes,
  //        data,
  //        kRs255_223MessageBytes);

  // memcpy(ecc_bytes + kRs255_223MessageBytes,
  //        parity,
  //        kRs255_223ParityBytes);

  // memcpy(ecc_bytes + kRs255_223TotalBytes,
  //        data,
  //        kRs255_223MessageBytes);
  // memcpy(ecc_bytes + kRs255_223TotalBytes + kRs255_223MessageBytes,
  //        parity,
  //        kRs255_223ParityBytes);


  // for (int i = 0; i < 223; i++) {
  //   std::cout << (int)ecc_bytes[i] << " ";
  // }
  // std::cout << std::endl;
  // for (int i = 223; i < 223 + 16; i++) {
  //   std::cout << (int)ecc_bytes[i] << " ";
  // }
  // std::cout << std::endl;

  // for (int i = 255; i < 510; i++) {
  //   std::cout << (int)ecc_bytes[i] << " ";
  // }
  // std::cout << std::endl;


  // Now we have all of the values set for embedding into a JPEG.
  // for (int image_h = 0; image_h < kBlocksHigh; image_h++) {
  //   for (int image_w = 0; image_w < kBlocksWide; image_w++) {
  //     MatrixRepresentation mr;
  //     mr.InitFromString(ecc_bytes + (image_h * kBlocksWide + image_w));

  //     std::vector<int> matrix_entries;
  //     mr.ToInts(&matrix_entries);

  //     image.FillBlockFromInts(matrix_entries, discretizations, image_h, image_w);
  //   }
  // }

  // vector<unsigned char> output_jpeg;
  // assert(gfx::JPEGCodec::Encode(image.data,
  //                               gfx::JPEGCodec::FORMAT_RGB,
  //                               kBlocksWide * kPixelDimPerBlock,
  //                               kBlocksHigh * kPixelDimPerBlock,
  //                               kBlocksWide * kPixelDimPerBlock * kCharsPerPixel,
  //                               FLAGS_quality,
  //                               &output_jpeg));

  // std::string output(output_jpeg.begin(), output_jpeg.end());
  // std::cout << output << std::endl;
  // std::cout << std::endl;




  // for (int height = 0; height < kBlocksHigh * kPixelDimPerBlock; height++) {
  //   for (int width = 0;
  //        width < kBlocksWide * kPixelDimPerBlock * kCharsPerPixel;
  //        width += kCharsPerPixel) {

  //     std::cout <<
  //         (int)image.data[
  //             height * kBlocksWide * kPixelDimPerBlock * kCharsPerPixel +
  //             width] << " ";
  //   }
  //   std::cout << std::endl;
  // }
}

} // namespace cryptogram

int main(int argc, char** argv) {
  google::ParseCommandLineFlags(&argc, &argv, false);
  cryptogram::Foo();

  return 0;
}
