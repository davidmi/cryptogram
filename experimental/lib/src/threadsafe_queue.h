// Copyright 2012. The Cryptogram Authors. BSD-Style License.
// Author: tierney@cs.nyu.edu (Matt Tierney)

// Boost Software License - Version 1.0 - August 17th, 2003

// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:

// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include <queue>
#include <mutex>
#include <condition_variable>
#include <memory>

template<typename T>
class ThreadsafeQueue {
 public:
  ThreadsafeQueue() {}

  void push(T new_value) {
    std::lock_guard<std::mutex> lock(mutex_);
    data_queue_.push(std::move(new_value));
    data_cond_var_.notify_one();
  }

  void wait_and_pop(T& value) {
    std::unique_lock<std::mutex> lock(mutex_);
    data_cond_var_.wait(lock,[this]{return !data_queue_.empty();});
    value=std::move(data_queue_.front());
    data_queue_.pop();
  }

  std::shared_ptr<T> wait_and_pop() {
    std::unique_lock<std::mutex> lock(mutex_);
    data_cond_var_.wait(lock,[this]{return !data_queue_.empty();});
    std::shared_ptr<T> res(
        std::make_shared<T>(std::move(data_queue_.front())));
    data_queue_.pop();
    return res;
  }

  bool try_pop(T& value) {
    std::lock_guard<std::mutex> lock(mutex_);
    if(data_queue_.empty())
      return false;
    value=std::move(data_queue_.front());
    data_queue_.pop();
  }

  std::shared_ptr<T> try_pop() {
    std::lock_guard<std::mutex> lock(mutex_);
    if(data_queue_.empty()) {
      return std::shared_ptr<T>();
    }
    std::shared_ptr<T> res(std::make_shared<T>(std::move(data_queue_.front())));
    data_queue_.pop();
    return res;
  }

  bool empty() const {
    std::lock_guard<std::mutex> lock(mutex_);
    return data_queue_.empty();
  }
  
 private:
  mutable std::mutex mutex_;
  std::queue<T> data_queue_;
  std::condition_variable data_cond_var_;
};

// int main()
// {
//     ThreadsafeQueue<int> rq;
// }
